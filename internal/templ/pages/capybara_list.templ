package pages

import "monkeydioude/grig/internal/html/page_data"
import "strconv"

templ JSBlock() {
<script type="text/javascript">
    let serviceCount = document.querySelectorAll("#servicesContainer .service-block").length; // Track the number of service blocks

    // Add a new service block
    document.getElementById('addServiceButton').addEventListener('click', function () {
        const container = document.getElementById('servicesContainer');
        const newServiceBlock = document.createElement('div');
        newServiceBlock.className = 'service-block';
        newServiceBlock.innerHTML = `
                <div class="form-group">
                <label>Service ID</label>
                <input type="text" name="services[${serviceCount}][id]" placeholder="Service ID" required>
                </div>
                <div class="form-group">
                <label>Method</label>
                <input type="text" name="services[${serviceCount}][method]" placeholder="Method" required>
                </div>
                <div class="form-group">
                <label>Pattern</label>
                <input type="text" name="services[${serviceCount}][pattern]" placeholder="Pattern" required>
                </div>
                <div class="form-group">
                <label>Port</label>
                <input type="number" name="services[${serviceCount}][port]" placeholder="Port" required>
                </div>
                <button type="button" class="remove-button" onclick="removeService(this)">Remove</button>
            `;
        container.appendChild(newServiceBlock);
        serviceCount++;
    });

    // Remove a service block
    function removeService(button) {
        button.parentElement.remove();
    }

    // Submit the form
    document.getElementById('configForm').addEventListener('submit', function (e) {
        e.preventDefault();

        // Create a JSON representation of the form
        const formData = new FormData(this);
        const data = { proxy: {}, services: [] };

        for (const [key, value] of formData.entries()) {
            if (key.startsWith('proxy')) {
                const field = key.match(/\[([^\]]+)\]/)[1];
                data.proxy[field] = value;
            } else if (key.startsWith('services')) {
                const [_, index, field] = key.match(/\[([^\]]+)\]\[([^\]]+)\]/);
                if (!data.services[index]) data.services[index] = {};
                data.services[index][field] = value;
            }
        }

        // POST the data
        fetch('/capybara/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        }).then(response => {
            if (response.ok) {
                alert('Form submitted successfully!');
            } else {
                alert('Failed to submit form.');
            }
        });
    });
</script>
}

templ CSSBlock() {
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f9;
        color: #333;
    }

    .container {
        max-width: 800px;
        margin: 50px auto;
        padding: 20px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    h1 {
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
    }

    .services-container .form-group label {
        color: #1e1e1e;
    }

    .form-group input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .services-container {
        margin-top: 20px;
    }

    .service-block {
        border: 1px solid #ccc;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 4px;
        background-color: #f9f9f9;
    }

    .remove-button {
        background: #e74c3c;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
    }

    .remove-button:hover {
        background: #c0392b;
    }

    .add-service-btn {
        display: inline-block;
        margin-top: 10px;
        padding: 10px 15px;
        background: #3498db;
        color: white;
        text-align: center;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .add-service-btn:hover {
        background: #2980b9;
    }

    button[type="submit"] {
        display: block;
        margin: 20px auto 0;
        padding: 10px 20px;
        background: #2ecc71;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
    }

    button[type="submit"]:hover {
        background: #27ae60;
    }
</style>
}

templ CapybaraList(layout templ.Component, page page_data.CapybaraData) {
    @IndexCSS()
    @CSSBlock()
    <div id="capybara-create">
        <form id="configForm">
            <!-- Proxy Configuration -->
            <div class="form-group">
                <label for="proxyPort">Proxy Port</label>
                <input type="number" id="proxyPort" name="proxy[port]" value={page.Data.PortString()}
                    placeholder="80 or 443 for example" required>
            </div>
            <div class="form-group">
                <label for="proxyTlsHost">TLS Host</label>
                <input type="text" id="proxyTlsHost" name="proxy[tls_host]" value={page.Data.Proxy.TLSHost}
                    placeholder="domain.com" required>
            </div>

            <!-- Services Configuration -->
            <div class="services-container" id="servicesContainer">
                for it, service := range page.Data.Services {
                <div class="service-block">
                    <div class="form-group">
                        <label>Service Name</label>
                        <input type="text" name={page.GetServiceInputName(it, "id" )} value={service.ID}
                            placeholder="Service name" required>
                    </div>
                    <div class="form-group">
                        <label>Method</label>
                        <input type="text" name={page.GetServiceInputName(it, "method" )} value={service.Method}
                            placeholder="string, regex etc..." required>
                    </div>
                    <div class="form-group">
                        <label>Pattern</label>
                        <input type="text" name={page.GetServiceInputName(it, "pattern" )} value={service.Pattern}
                            placeholder="/item/{:id}" required>
                    </div>
                    <div class="form-group">
                        <label>Port</label>
                        <input type="number" name={page.GetServiceInputName(it, "port" )} value={strconv.Itoa(service.Port)}
                            placeholder="Port which the service runs on" required>
                    </div>
                    <button type="button" class="remove-button" onclick="removeService(this)">Remove</button>
                </div>
                }
            </div>

            <!-- Add Service Button -->
            <button type="button" class="add-service-btn" id="addServiceButton">+ Add a New Service</button>

            <!-- Submit Button -->
            <button type="submit">Submit</button>
        </form>
    </div>
    @JSBlock()
}