package pages

templ JSBlock() {
    <script type="text/javascript">
        let serviceCount = document.querySelectorAll("#servicesContainer .service-block").length; // Track the number of service blocks

        // Add a new service block
        document.getElementById('addServiceButton').addEventListener('click', function () {
            const container = $('#servicesContainer');
            const newServiceBlock = document.createElement('div');
            newServiceBlock.className = 'service-block';
            newServiceBlock.innerHTML = `
                <div class="form-group">
                    <label for="services[${ serviceCount }][id]">Name</label>
                    <input id="services[${ serviceCount }][id]" class="text-black placeholder:text-slate-400" type="text" name="services[${ serviceCount }][id]" value=""
                        placeholder="Service name" required>
                </div>
                <div class="form-group">
                    <label for="services[${ serviceCount }][method]">Method</label>
                    <input id="services[${ serviceCount }][method]" class="text-black placeholder:text-slate-400" type="text" name="services[${ serviceCount }][method]" value=""
                        placeholder="string, regex etc..." required>
                </div>
                <div class="form-group">
                    <label for="services[${ serviceCount }][pattern]">Pattern</label>
                    <input id="services[${ serviceCount }][pattern]" class="text-black placeholder:text-slate-400" type="text" name="services[${ serviceCount }][pattern]" value=""
                        placeholder="/api/vault_hunter" required>
                </div>
                <div class="form-group">
                    <label for="services[${ serviceCount }][port]">Port</label>
                    <input id="services[${ serviceCount }][port]" class="text-black placeholder:text-slate-400" type="number" name="services[${ serviceCount }][port]" value=""
                        placeholder="Port of the service" required>
                </div>
                <button type="button" class="remove-button" onclick="removeService(this)">Remove</button>
                `;
            container.appendChild(newServiceBlock);
            serviceCount++;
        });

        // Remove a service block
        function removeService(button) {
            button.parentElement.remove();
        }

        function makeServiceLabel(it, name) {
            return `services[${it}][${name}]`;
        }

    </script>
}

templ CSSBlock() {
<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f4f4f9;
        color: #333;
    }

    .container {
        max-width: 800px;
        margin: 50px auto;
        padding: 20px;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    h1 {
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
    }

    .services-container .form-group label {
        color: #1e1e1e;
    }

    .form-group input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .services-container {
        margin-top: 20px;
    }

    .service-block {
        border: 1px solid #ccc;
        padding: 15px;
        margin-bottom: 10px;
        border-radius: 4px;
        background-color: #f9f9f9;
    }

    .remove-button {
        background: #e74c3c;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
    }

    .remove-button:hover {
        background: #c0392b;
    }

    .add-service-btn {
        display: inline-block;
        margin-top: 10px;
        padding: 10px 15px;
        background: #3498db;
        color: white;
        text-align: center;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .add-service-btn:hover {
        background: #2980b9;
    }

    button[type="submit"] {
        display: block;
        margin: 20px auto 0;
        padding: 10px 20px;
        background: #2ecc71;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1rem;
    }

    button[type="submit"]:hover {
        background: #27ae60;
    }
</style>
}

templ (page CapybaraData) Content() {
    @IndexCSS()
    @CSSBlock()
    <div id="capybara-create">

    <div id="infoBox" class="hidden transition ease-in-out delay-150 bg-blue-500 hover:-translate-y-1 hover:scale-110 hover:bg-indigo-500 duration-300">salut les kids</div>
        <script>
            function performAnimation() {
                $("#infoBox").reemoveClass("hidden");
            }
        </script>
        <form
            hx-post="/api/v1/capybara/create"
            hx-swap="none"
            hx-ext="json-enc-custom"
            hx-on::after-request="performAnimation()"
        >
            <!-- Proxy Configuration -->
            <div class="form-group">
                <label for="proxyPort">Reverse-Proxy Port</label>
                <input class="text-black placeholder:text-slate-400" type="number" id="proxyPort" name="proxy[port]" value={page.Data.PortString()}
                    placeholder="80 or 443 for example" required>
            </div>
            <div class="form-group">
                <label for="proxyTlsHost">TLS Host</label>
                <input class="text-black placeholder:text-slate-400" type="text" id="proxyTlsHost" name="proxy[tls_host]" value={page.Data.Proxy.TLSHost}
                    placeholder="domain.com" required>
            </div>

            <!-- Services Configuration -->
            <div class="services-container" id="servicesContainer">
                <h2>Services</h2>
                for it, service := range page.Data.Services {
                <div class="service-block">
                    <div class="form-group">
                        <label for={page.GetServiceInputName(it, "id")}>Name</label>
                        <input id={page.GetServiceInputName(it, "id")} class="text-black placeholder:text-slate-400" type="text" name={page.GetServiceInputName(it, "id" )} value={service.ID}
                            placeholder="Service name" required>
                    </div>
                    <div class="form-group">
                        <label for={page.GetServiceInputName(it, "method")}>Method</label>
                        <input id={page.GetServiceInputName(it, "method")} class="text-black placeholder:text-slate-400" type="text" name={page.GetServiceInputName(it, "method" )} value={service.Method}
                            placeholder="string, regex etc..." required>
                    </div>
                    <div class="form-group">
                        <label for={page.GetServiceInputName(it, "pattern")}>Pattern</label>
                        <input id={page.GetServiceInputName(it, "pattern")} class="text-black placeholder:text-slate-400" type="text" name={page.GetServiceInputName(it, "pattern" )} value={service.Pattern}
                            placeholder="/api/vault_hunter" required>
                    </div>
                    <div class="form-group">
                        <label for={page.GetServiceInputName(it, "port")}>Port</label>
                        <input id={page.GetServiceInputName(it, "port")} class="text-black placeholder:text-slate-400" type="number" name={page.GetServiceInputName(it, "port" )} value={service.PortString()}
                            placeholder="Port of the service" required>
                    </div>
                    <button type="button" class="remove-button" onclick="removeService(this)">Remove</button>
                </div>
                }
            </div>

            <!-- Add Service Button -->
            <button type="button" class="add-service-btn" id="addServiceButton">+ Add a New Service</button>

            <!-- Submit Button -->
            <button type="submit">Submit</button>
        </form>
    </div>
    @JSBlock()
}