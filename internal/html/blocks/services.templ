package blocks

import (
    "monkeydioude/grig/internal/model"
    "monkeydioude/grig/pkg/html/elements/form"
    "monkeydioude/grig/pkg/html/elements/button"
    "monkeydioude/grig/pkg/html/elements/span"
    "fmt"
	"strings"
	"monkeydioude/grig/pkg/html/elements/hx"
	"monkeydioude/grig/pkg/html/elements/input"
	"monkeydioude/grig/internal/consts"
)
templ ServicesEnvironmentBlock(base string, it int, env string, service model.Service) {
    <div class="service-block env-element">
        @form.DisplayFormGroup(form.StringFormGroup(service.EnvironmentIdGen(base, it), "Environment", env)) { }
    </div>
}

templ ServicesService(it int, service model.Service) {
    {{ restartServiceCmdUrl := "/cmd/services/restart/"+ service.Name }}
    {{ successMsg := fmt.Sprintf(consts.SERVICE_RESTARTED_SUCCESS_MSG, service.Name) }}
    {{ errMsg := fmt.Sprintf(consts.SERVICE_RESTARTED_ERR_MSG, service.Name) }}
    <div class="services-service-block">
        @hx.H2(service.Name)
        @input.Hidden(service.IdGen(it, "", "og_path"), service.Path)
        <div class="service-block bg-slate-800 border-gray-900 border-1 rounded p-4 mb-2.5">
            // @form.DisplayFormGroup(form.StringFormGroup(service.IdGen("name"), "", service.Name)) { Name }
            @form.DisplayFormGroup(form.StringFormGroup(service.IdGen(it, "", "path"), "File path", service.Path)) { Path }
            @form.DisplayFormGroup(form.StringFormGroup(service.IdGen(it, "unit", "description"), "", service.Unit.Description)) { Description }
            @form.DisplayFormGroup(form.StringFormGroup(service.IdGen(it, "service", "exec_start"), "/home/mkd/go/bin/josuke -c /home/mkd/config/josuke.config.json", service.Service.ExecStart)) { Execution Command }
            @span.Default() { Environment Variables }
            {{ envClass := fmt.Sprintf("%s-env-container", strings.Replace(service.Name, ".", "_", 1))}}
            {{ selector := "."+envClass }}
            {{ removeSelector := selector+ " .env-element" }}
            {{ base := fmt.Sprintf("services[%d][service]", it)}}
            <div class={envClass} data-parent-name={base}>
                for envIt, env := range service.Service.Environment {
                    @ServicesEnvironmentBlock(base, envIt, env, service)
                }
            </div>
            <div class="my-2">
                @button.AjaxBlockButton("/services/environment/block", selector, "rounded-none rounded-s mr-0", "bg-sky-700 over:bg-sky-800") { + Env }
                @button.RemoveLastOf(removeSelector, "rounded-none rounded-e", "bg-red-700 hover:bg-red-800") { - Env }
            </div>
        </div>
        @button.RemoveParentButton() { Delete }
        @button.AjaxSimplePostUrl(restartServiceCmdUrl, successMsg, errMsg,  "mx-2") { Restart service }
    </div>
}